{"version":3,"sources":["components/Header/Server/index.js","containers/ServerContainer/selectors.js","containers/ServerContainer/constants.js","containers/ServerContainer/actions.js","containers/ServerContainer/index.js","components/Header/index.js","components/Footer/index.js","components/SocketProvider/socket.js","components/SocketProvider/provider.js","components/SocketProvider/index.js","containers/StatsContainer/constants.js","containers/StatsContainer/actions.js","containers/TournamentContainer/constants.js","containers/TournamentContainer/actions.js","containers/SocketContainer/index.js","sections/Home/index.js","components/Lobby/index.js","components/Lobby/Tournament/Match/index.js","components/Lobby/Tournament/types/Brackets/BracketMatch.js","components/Lobby/Tournament/types/Brackets/Bracket.js","components/Lobby/Tournament/types/Brackets/parseStats.js","components/Lobby/Tournament/types/Brackets/index.js","components/Lobby/Tournament/types/DoubleElimination.js","components/UTTTGame/Board/index.js","components/UTTTGame/index.js","components/Lobby/Tournament/types/FreeForAll.js","components/Lobby/Tournament/index.js","components/Lobby/Admin/index.js","sections/Tournaments/section.js","sections/Tournaments/index.js","sections/Replay/Uploader/index.js","sections/Replay/GameExplorer/index.js","sections/Replay/index.js","sections/NotFoundPage/index.js","sections/App/index.js","containers/ServerContainer/reducer.js","containers/StatsContainer/reducer.js","containers/TournamentContainer/reducer.js","reducers.js","index.js","store.js"],"names":["Server","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleHostChange","newHost","setState","host","saveChanges","e","preventDefault","actions","connect","state","nextProps","status","modalContent","_this2","react_default","a","createElement","Popup","content","trigger","Label","circular","color","empty","style","marginRight","errorMessage","error","type","message","Form","onSubmit","loading","Group","inline","Input","value","onChange","input","Button","primary","Message","icon","header","Content","Detail","Grid","columns","Column","negative","onClick","disconnect","button","basic","inverted","compact","className","Modal","Header","Icon","name","React","Component","getState","createSelector","get","substate","toJS","CONNECT","DISCONNECT","CONNECTED","DISCONNECTED","CONNECTION_ERROR","payload","connected","disconnected","data","mapStateToProps","dispatch","bindActionCreators","sections","url","exact","Menu","Item","as","href","map","section","NavLink","activeClassName","to","title","key","target","position","ServerContainer","components_Footer","socket","close","SocketContext","createContext","uuid","emit","SocketProvider","console","warn","localStorage","getItem","provider","Provider","children","setItem","io","reconnection","timeout","query","client","token","on","updateStats","updateTournaments","lobby","history","push","concat","toast","withRouter","GET_STATS","UPDATE_STATS","getStats","stats","GET_TOURNAMENTS","UPDATE_TOURNAMENTS","getTournaments","tournaments","objectSpread","serverActions","statsActions","tournamentsActions","Home","react","Container","Row","Lobby","dividerStyle","marginTop","textAlign","Segment","Tournament_Match","match","totalGames","colorA","wins","colorB","progress","gridStyle","displayProgress","borderBottom","Progress","gamesCompleted","total","indicating","classNames","small","verticalAlign","players","BracketMatch","updateRef","ref","scroll","bracket","scrollToComponent","duration","_this$props","champion","Loader","active","size","wrapper","Fragment","currentMatch","playerIndex","gamesTied","winner","loser","tie","PureComponent","Bracket","item","length","BracketMatch_BracketMatch","topLevel","finished","child","$index","parseStats","matches","brackets","matchesRef","forEach","matchID","topLevelMatches","filter","parentMatches","parentMatch","index","indexOf","parent","splice","matchUUID","find","eachMatch","addMatch","matchBracket","findIndex","player","parentLessPlayers","0","1","addedParentMatches","parentMatchInfo","parseInt","keys","Brackets","Brackets_Bracket","options","numberOfGames","DoubleElimination","Brackets_Brackets","tournament","Board","finishedClass","game","isFinished","highlightBoard","board","row","rowIndex","cell","cellIndex","highlight","highlightMove","join","mainIndex","lastMove","you","opponent","UTTTGame","updateSelection","val","replay","isReplaying","pauseReplaying","moves","replayInterval","setInterval","clearInterval","hideSlider","width","rc_slider_es","min","max","step","UTTT","boardIndex","UTTTGame_Board","renderSlider","MatchPage","currentGame","fontSize","components_UTTTGame","log","renderCurrentMatch","upcoming","List","relaxed","renderMatches","started","ranking","react_flip_move_es","TournamentRenderer","FreeForAll","warning","disabled","waiting","continueMatches","fluid","margin","largeScreen","widescreen","backToLobby","renderContinueButton","renderTournamentLabel","renderRanking","renderTournament","LobbyAdmin","startTournament","tournamentOptions","activePlayers","p","showTournament","params","updateOption","field","event","updatedOptions","update","updateTypeOption","autoPlay","updateCheckedOption","checked","kickPlayer","lobbyToken","playerToken","removeActivePlayer","banPlayer","addActivePlayer","toConsumableArray","onDragPlayerStart","dataTransfer","setData","effectAllowed","onDragPlayerDrop","getData","activePlayersDrop","connectedPlayersDrop","onDragPlayerMouseMove","playersDrop","defineProperty","onDragPlayerOver","renderLoader","admin","renderAdmin","availableGames","text","info","address","healthy","Select","label","gameAddress","widths","placeholder","Checkbox","invalidGameServerSelected","renderJoinCommand","uri","borderTop","padding","addAllConnectedPlayers","undefined","renderPlayers","_ref","titleText","dropText","infoText","displayAddAll","footerStyle","bottom","left","background","sort","playerDropKey","addAll","window","location","paddingBottom","height","float","onDrop","onDragOver","onDragEnter","onDragLeave","borderRadius","isActive","draggable","inactive","onDragStart","outline","display","Dropdown","top","transform","slice","spectating","isAdmin","newLobby","assign","Tournament_MatchPage","attached","divided","Tournaments_section","render","Switch","Route","path","LobbySelector","Tournaments","Consumer","Uploader","acceptedFiles","rejectedFiles","errors","file","split","pop","readFile","reader","FileReader","onload","onUpload","result","onloadstart","onerror","readAsText","elements_Header_Header","dist_default","multiple","PLAYER_YOU","ME","PLAYER_OPPONENT","OPPONENT","GameExplorer","parseGameData","gameData","curGame","ret","games","won","lost","tied","lines","line","uttt","parts","turn","coord","move","addOpponentMove","addMyMove","getResult","printWinner","select","activeMove","_this$parseGameData","activeGame","_this$parseGameData2","selection","stackable","Divider","horizontal","Table","selectable","striped","HeaderCell","Body","Cell","Replay","Replay_GameExplorer","sections_Replay_Uploader","NotFound","App","queryString","parse","search","substr","Redirect","SocketContainer","src_components_Header","lib","component","hosts","initialState","Map","newUuid","v4","storage","x","removeItem","DOMException","code","storageAvailable","storedUuid","getUuid","handleActions","_handleActions","constants","action","merge","reducer_handleActions","routeInitialState","fromJS","locationBeforeTransitions","routeReducer","arguments","LOCATION_CHANGE","createHistory","store","asyncReducers","middlewares","routerMiddleware","enhancers","applyMiddleware","apply","handleTransitions","composeEnhancers","compose","createStore","combineReducers","route","server","serverReducer","statsReducer","tournamentsReducer","configureStore","MOUNT_NODE","document","getElementById","app","es","react_router_redux_es","src_sections_App","ReactDOM"],"mappings":"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","file":"static/js/main.37d23b14.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Message, Popup, Grid, Label, Button, Form, Modal, Icon } from 'semantic-ui-react';\n\nclass Server extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      host: this.props.host,\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      host: nextProps.host,\n    });\n  }\n\n  handleHostChange = (newHost) => {\n    this.setState({\n      host: newHost,\n    });\n  };\n\n  saveChanges = (e) => {\n    e.preventDefault();\n    this.props.actions.connect(this.state.host);\n  };\n\n  render() {\n    let status, modalContent;\n\n    if (this.props.status === 'disconnected' || this.props.status === 'connecting') {\n      status = (\n        <Popup\n          content='Click to connect to a server'\n          trigger={\n            <div>\n              <Label circular color='red' empty style={ {marginRight: '10px'} }/>\n              { this.props.content || 'Connect' }\n            </div>\n          }\n        />\n      );\n      const errorMessage = (this.props.error) ? (\n        <div>\n          <p>Please make sure that you have typed the right host:port, and that the server is running.</p>\n          <p><code>{ this.props.error.type }: { this.props.error.message }</code></p>\n        </div>\n        ) : null;\n      modalContent = (\n        <Form onSubmit={ this.saveChanges } error={ !!errorMessage } loading={ this.props.status === 'connecting' }>\n          <Form.Group inline>\n            <label>Server</label>\n            <Form.Input value={ this.state.host } onChange={ (e, input) => { this.handleHostChange(input.value);  } } />\n            <Form.Button primary>Connect</Form.Button>\n          </Form.Group>\n          <Message\n            error\n            icon='warning sign'\n            header='Unable to connect'\n            content={ errorMessage }\n          />\n        </Form>\n      );\n    } else {\n      status = (\n        <Popup\n          trigger={\n            <div>\n              <Label circular color='green' empty style={ {marginRight: '10px'} }/>\n              Connected\n            </div>\n          }\n        >\n          <Popup.Content>\n            <Label color='green'>\n              Server\n              <Label.Detail>\n                { this.props.host }\n              </Label.Detail>\n            </Label>\n          </Popup.Content>\n        </Popup>\n      );\n      modalContent = (\n        <Grid columns={ 2 }>\n          <Grid.Column>\n            <Label circular color='green' empty style={ {marginRight: '10px'} }/>\n            Connected to { this.props.host }\n          </Grid.Column>\n          <Grid.Column>\n            <Button negative onClick={ this.props.actions.disconnect }>Disconnect</Button>\n          </Grid.Column>\n        </Grid>\n      );\n    }\n\n    const button = (\n      <Button\n        basic\n        inverted={ this.props.inverted }\n        compact\n        className='as-text'\n        content={ status }\n      />\n    );\n\n    return (\n      <Modal trigger={ button }>\n        <Modal.Header>\n          <Icon name='lightning' />\n          Server connection\n        </Modal.Header>\n        <Modal.Content>\n          { modalContent }\n        </Modal.Content>\n      </Modal>\n    );\n  }\n}\n\nServer.propTypes = {\n  host: PropTypes.string.isRequired,\n  status: PropTypes.string.isRequired,\n  error: PropTypes.shape({\n    type: PropTypes.string,\n    message: PropTypes.string,\n  }),\n  actions: PropTypes.shape({\n    connect: PropTypes.func.isRequired,\n    disconnect: PropTypes.func.isRequired,\n  }).isRequired\n};\n\nexport default Server;\n","import {createSelector} from 'reselect';\n\nconst applicationsSelector = (state) => state.get('server');\n\nconst getState = createSelector(\n  [applicationsSelector],\n  (substate) => substate.toJS()\n);\n\nexport default getState;\n\nexport {\n  applicationsSelector,\n  getState,\n};\n","export const CONNECT = 'SERVER_CONNECT';\nexport const DISCONNECT = 'SERVER_DISCONNECT';\nexport const CONNECTED = 'SERVER_CONNECTED';\nexport const DISCONNECTED = 'SERVER_DISCONNECTED';\nexport const CONNECTION_ERROR = 'SERVER_CONNECTION_ERROR';","import * as actions from './constants';\n\nexport function connect(host) {\n  return {\n    type: actions.CONNECT,\n    payload: host,\n  }\n}\n\nexport function disconnect() {\n  return {\n    type: actions.DISCONNECT,\n    payload: {},\n  }\n}\n\nexport function connected() {\n  return {\n    type: actions.CONNECTED,\n    payload: {},\n  }\n}\n\nexport function disconnected(data) {\n  return {\n    type: actions.DISCONNECTED,\n    payload: data,\n  }\n}\n\nexport function error(data) {\n  return {\n    type: actions.CONNECTION_ERROR,\n    payload: data,\n  }\n}","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport Server from '../../components/Header/Server';\n\nimport { getState } from './selectors';\nimport * as actions from './actions';\n\nconst mapStateToProps = getState;\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n      actions: bindActionCreators(actions, dispatch),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Server);\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Menu, Icon } from 'semantic-ui-react';\n\nimport ServerContainer from '../../containers/ServerContainer';\nimport './index.scss';\n\nclass Header extends React.Component {\n  constructor() {\n    super();\n\n    this.sections = [\n      {\n        url: '/',\n        name: 'Home',\n        icon: 'home',\n        exact: true,\n      },\n      {\n        url: '/tournaments',\n        name: 'Tournaments',\n        icon: 'game',\n      },\n      {\n        url: '/replay',\n        name: 'Analyse',\n        icon: 'lab',\n      },\n    ];\n  }\n\n  render() {\n    return (\n      <Menu inverted className='main-header'>\n        <Menu.Item header\n                   as='a'\n                   className='socialgorithm-logo animated-hue'\n                   href='https://socialgorithm.org'\n        >\n          #socialgorithm\n        </Menu.Item>\n        {\n          this.sections.map((section) => (\n            <Menu.Item\n                exact={ section.exact }\n                as={ NavLink }\n                activeClassName='active'\n                to={ section.url }\n                title={ section.name }\n                key={ section.url }\n                icon={ section.icon }\n                content={ section.name }\n            />\n          ))\n        }\n        <Menu.Item href=\"https://socialgorithm.org/docs/\" target='_blank'>\n          <Icon name='book'/>\n          Docs\n        </Menu.Item>\n\n        <Menu.Menu position='right'>\n          <Menu.Item href=\"https://github.com/socialgorithm\" target='_blank'>\n            <Icon name='github'/>\n          </Menu.Item>\n          <Menu.Item href=\"https://socialgorithm-slack.herokuapp.com\" target='_blank'>\n            <Icon name='slack hash'/>\n            Slack\n          </Menu.Item>\n          <Menu.Item>\n            <ServerContainer inverted />\n          </Menu.Item>\n        </Menu.Menu>\n      </Menu>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport { Icon } from 'semantic-ui-react';\n\nimport './index.scss';\n\nexport default () => {\n    return (\n        <footer>\n            <p>\n                &copy; 2017 <a href=\"https://socialgorithm.org\">#Socialgorithm</a>. All Rights Reserved.\n                Help us spread the <Icon name='heart' /> for tech!\n            </p>\n        </footer>\n    );\n};","import io from 'socket.io-client';\nimport { toast } from 'react-toastify';\n\nexport const connect = (props, state) => {\n    if (state.socket) {\n        return state;\n    }\n    const socket = io(props.host, {\n        reconnection: true,\n        timeout: 2000,\n        query: {\n            client: true,\n            token: props.uuid,\n        }\n    });\n\n    socket.on('stats', (data) => {\n        props.actions.updateStats(data);\n    });\n\n    socket.on('tournament', (data) => {\n        props.actions.updateTournaments(data);\n    });\n\n    socket.on('connect', () => {\n        props.actions.connected();\n        // persist the host to localStorage\n        localStorage.setItem('host', props.host);\n    });\n\n    socket.on('lobby created', (data) => {\n        const lobby = data.lobby;\n        // Redirect to this token\n        props.history.push(`/tournaments/${lobby.token}`);\n    });\n\n    socket.on('lobby exception', (data) => {\n        toast.error(data.error);\n        props.history.push('/tournaments');\n    });\n\n    socket.on('exception', (data) => {\n        toast.error(data.error);\n    });\n\n    socket.on('disconnect', (data) => {\n        props.actions.disconnected(data);\n    });\n\n    socket.on('reconnect_error', (data) => {\n        props.actions.error({\n            type: 'reconnect_error',\n            message: data.message,\n        });\n    });\n\n    socket.on('connect_error', (data) => {\n        props.actions.error({\n            type: 'connect_error',\n            message: data.message,\n        });\n    });\n\n    socket.on('error', (data) => {\n        const message = (typeof data === 'string') ? data : data.message;\n            props.actions.error({\n            type: 'error',\n            message,\n        });\n    });\n\n    socket.connect();\n\n    return {\n        socket,\n    };\n};\n\nexport const disconnect = (props, state) => {\n    if (state.socket) {\n      state.socket.close();\n      props.actions.disconnected();\n    }\n    return {\n      socket: null,\n    };\n  };","import React from 'react';\n\nexport const SocketContext = React.createContext({\n    socket: null,\n    uuid: null,\n    emit: () => {},\n});\n\nexport default SocketContext;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\n\nimport { connect, disconnect } from './socket';\n\nimport SocketContext from './provider';\n\nclass SocketProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      socket: null,\n      emit: this.emit,\n      uuid: props.uuid,\n    };\n\n    if (localStorage.getItem('host') !== null) {\n      this.props.actions.connect(\n        localStorage.getItem('host')\n      );\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.status === 'connecting') {\n      // update the saved host\n      localStorage.setItem('host', props.host);\n      // connect\n      return connect(props, state);\n    }\n    if (props.status === 'disconnecting') {\n      return disconnect(props, state);\n    }\n    return state;\n  }\n\n  componentWillUnmount() {\n    disconnect(this.props, this.state);\n  }\n\n  emit = (message, payload) => {\n    if (!this.state.socket) {\n      console.warn('Socket not connected');\n      return;\n    }\n    return this.state.socket.emit(message, payload);\n  };\n\n  render() {\n    return (\n      <SocketContext.Provider value={ this.state }>\n        { this.props.children }\n      </SocketContext.Provider>\n    );\n  }\n}\n\nSocketProvider.propTypes = {\n  host: PropTypes.string.isRequired,\n  status: PropTypes.string.isRequired,\n  actions: PropTypes.shape({\n    connected: PropTypes.func.isRequired,\n    disconnected: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    updateStats: PropTypes.func.isRequired,\n    updateTournaments: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default withRouter(SocketProvider);","export const GET_STATS = 'SERVER_GET_STATS';\nexport const UPDATE_STATS = 'SERVER_UPDATE_STATS';","import * as actions from './constants';\n\nexport function getStats() {\n  return {\n    type: actions.GET_STATS,\n    payload: null,\n  }\n}\n\nexport function updateStats(stats) {\n  return {\n    type: actions.UPDATE_STATS,\n    payload: stats,\n  }\n}","export const GET_TOURNAMENTS = 'SERVER_GET_TOURNAMENTS';\nexport const UPDATE_TOURNAMENTS = 'SERVER_UPDATE_TOURNAMENTS';","import * as actions from './constants';\n\nexport function getTournaments() {\n  return {\n    type: actions.GET_TOURNAMENTS,\n    payload: null,\n  }\n}\n\nexport function updateTournaments(tournaments) {\n  return {\n    type: actions.UPDATE_TOURNAMENTS,\n    payload: tournaments,\n  }\n}","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport SocketProvider from '../../components/SocketProvider';\n\nimport { getState } from '../ServerContainer/selectors';\nimport * as serverActions from '../ServerContainer/actions';\nimport * as statsActions from '../StatsContainer/actions';\nimport * as tournamentsActions from '../TournamentContainer/actions';\n\nconst mapStateToProps = getState;\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({ ...serverActions, ...statsActions, ...tournamentsActions }, dispatch),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SocketProvider);\n","import React, { Fragment } from 'react';\nimport { Container, Grid, Icon } from 'semantic-ui-react';\nimport { NavLink } from 'react-router-dom';\n\nimport './index.scss';\n\nexport default class Home extends React.Component {\n\n  render() {\n\n    return (\n      <Fragment>\n        <div className='hero'>\n            <Container>\n                <h1>Welcome to the Socialgorithm Workshop!</h1>\n            </Container>\n        </div>\n        <div className='section big-links'>\n            <Grid columns={ 3 }>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <h1><a href='https://socialgorithm.org/docs' title='Documentation'>\n                                <Icon name='book' /><br/ >\n                                Documentation\n                            </a></h1>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <h1><NavLink to='/tournaments'>\n                                <Icon name='game' /><br/ >\n                                Create/Join Tournaments\n                            </NavLink></h1>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <h1><NavLink to='/replay'>\n                                <Icon name='lab' /><br/ >\n                                Analyse Games\n                            </NavLink></h1>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n        </div>\n        <div className='bg-secondary section'>\n            <p>If it is the first time you're here, go to our Documentation above and read through the \"Getting Started \" section.</p>\n            <p>Remember that you can always <a href='https://socialgorithm-slack.herokuapp.com/'>join our Slack community</a> to ask for help from our mentors!</p>\n        </div>\n      </Fragment>\n    );\n  }\n}","import React from 'react';\nimport { Icon, Container, Button, Message, Grid, Segment } from 'semantic-ui-react';\n\nexport default (props) => {\n    if (!props.socket) {\n        return (\n            <Message>\n                Please connect to the server first.\n            </Message>\n        );\n    }\n\n    const createTournament = () => {\n        props.socket.emit('lobby create');\n    };\n\n    const dividerStyle = {\n        marginTop: '10em',\n    };\n\n    return (\n        <Container textAlign='center' style={ dividerStyle }>\n            <h1><Icon name='game'/> Tournaments</h1>\n            <Button\n                primary\n                icon='add'\n                content='Create'\n                onClick={ createTournament }\n            />\n            <Grid columns={ 2 } textAlign='left' style={ dividerStyle }>\n                <Grid.Row>\n                    <Grid.Column>\n                        <h2>Creating a Tournament</h2>\n                        <p>Players play against each other by connecting to Tournaments.</p>\n                        <p>When you create one, you'll be the <b>admin</b> for that tournament, which allows you to configure it, manage the list of players, and choose when it starts.</p>\n                        <p>Once you've created a tournament, you can just send the url to the other players to have them connect to it.</p>\n                        <p>This can also be used to play games between different versions of your own algorithm.</p>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <h2>Joining a Tournament</h2>\n                        <p>If you want to join someone else's tournament, just ask them for the tournament url.</p>\n                        <p>Tournaments are typically identified with any two random words, so it will be something like \"amazing-building\".</p>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n            <Segment style={ dividerStyle }>\n                <h2>Need help?</h2>\n                <p>You can give <a href=\"https://socialgorithm.org/docs\">our documentation</a> a try!</p>\n                <p>Otherwise, join our <a href=\"https://socialgorithm-slack.herokuapp.com\"><Icon name='slack hash' />Slack</a> and ask us there :)</p>\n            </Segment>\n        </Container>\n    );\n};","import React from 'react';\nimport classNames from 'classnames';\nimport { Grid, Progress } from 'semantic-ui-react';\n\nimport './index.scss';\n\nexport default (props) => {\n    const { match, totalGames } = props;\n    const stats = match.stats;\n    const colorA = stats.wins[0] > stats.wins[1] ? 'green' : null;\n    const colorB = stats.wins[1] > stats.wins[0] ? 'green' : null;\n\n    let progress = null;\n    let gridStyle = null;\n\n    if (props.displayProgress) {\n        gridStyle = {\n            borderBottom: '1px solid #efefef',\n        };\n        progress = (\n            <Progress\n                value={ match.stats.gamesCompleted }\n                total={ totalGames }\n                progress='ratio'\n                indicating\n            />\n        );\n    }\n    \n    return (\n        <div className={ classNames('match', { 'small': props.small }) }>\n            <Grid columns={ 2 } textAlign='center' verticalAlign='middle' style={ gridStyle }>\n                <Grid.Column color={ colorA }>\n                    <h2>{ match.players[0].token }</h2>\n                    <h3>{ stats.wins[0] }</h3>\n                </Grid.Column>\n                <Grid.Column color={ colorB }>\n                    <h2>{ match.players[1].token }</h2>\n                    <h3>{ stats.wins[1] }</h3>\n                </Grid.Column>\n            </Grid>\n            { progress }\n        </div>\n    );\n};","import React, { Fragment } from \"react\";\nimport classNames from \"classnames\";\nimport { Loader, Icon } from 'semantic-ui-react';\nimport scrollToComponent from 'react-scroll-to-component';\n\nimport Match from '../../Match';\n\nexport default class BracketMatch extends React.PureComponent {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      ref: null,\n    };\n  }\n\n  updateRef = (ref) => {\n    this.setState({\n      ref,\n    });\n  };\n\n  componentDidUpdate() {\n    this.scroll();\n  }\n\n  componentDidMount() {\n    this.scroll();\n  }\n\n  scroll() {\n    if (this.props.bracket.match && this.props.bracket.match.state === 'playing' && this.state.ref) {\n      // this match is being played, scroll to it\n      scrollToComponent(this.state.ref, {\n        duration: 500,\n      });\n    }\n  }\n\n  render() {\n    const { bracket, champion, totalGames } = this.props;\n    let content = bracket.name;\n    if (!bracket.name) {\n      content = (\n          <Loader active inline size='small' />\n      );\n    }\n    if (bracket.match && bracket.match.state === 'playing') {\n      content = (\n        <Match\n          wrapper={ Fragment }\n          match={ bracket.match }\n          totalGames={ totalGames }\n          displayProgress\n          small\n        />\n      );\n    } else {\n      if (champion) {\n        content = (\n          <Fragment>\n            <div className=\"top\"><span>Winner Winner</span></div>\n            <span className=\"champion-text\">\n              <Icon name='trophy' />\n              { content }\n            </span>\n            <div className=\"bottom\"><span>Chicken Dinner!</span></div>\n          </Fragment>\n        );\n      } else if (bracket.currentMatch && bracket.currentMatch.state === 'finished') {\n        const playerIndex = bracket.playerIndex;\n        if (playerIndex > -1) {\n          content = (\n            <Fragment>\n              { content }\n              <div className=\"bottom\">\n                <span>\n                  W { bracket.currentMatch.stats.wins[playerIndex] || 0 } - \n                  L { bracket.currentMatch.stats.wins[1 - playerIndex] || 0 } - \n                  T { bracket.currentMatch.stats.gamesTied || 0 }\n                </span>\n              </div>\n            </Fragment>\n          );\n        }\n      }\n    }\n    return (\n      <div\n        ref={ this.updateRef }\n        className={classNames(\"item-content\", {\n          winner: bracket.winner,\n          loser: bracket.loser,\n          tie: bracket.tie,\n          champion: champion,\n        })}\n      >\n        { content }\n      </div>\n    );\n  }\n}","import React from \"react\";\n\nimport BracketMatch from './BracketMatch';\n\nexport const Bracket = props => {\n  if (!props.item.children || props.item.children.length < 1) {\n    return (\n      <BracketMatch\n        bracket={ props.item }\n      />\n    );\n  }\n  return (\n    <div className=\"item\">\n      <div className=\"item-parent\">\n        <BracketMatch\n          bracket={ props.item }\n          totalGames={ props.totalGames }\n          champion={ props.item.topLevel && props.finished }\n        />\n      </div>\n      {props.item.children &&\n        props.item.children.length > 0 && (\n          <div className=\"item-children\">\n            {props.item.children.map((child, $index) => (\n              <div className=\"item-child\" key={$index}>\n                <Bracket item={child} />\n              </div>\n            ))}\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default Bracket;\n","/**\n * Parse Tournament Stats and generate the appropriate data structure\n * for the brackets to be rendered.\n * \n * @param {*} stats \n */\nexport const parseStats = stats => {\n  const matches = stats.matches;\n  const brackets = [];\n  // Prepare a map of matches for quick reference\n  const matchesRef = {};\n  matches.forEach(match => {\n    matchesRef[match.matchID] = match;\n  });\n\n  // Figure out the top level matches\n  // these are matches that are not parents of any match\n  const topLevelMatches = matches.map(match => match.matchID);\n  matches.filter(\n    match => match.parentMatches && match.parentMatches.length > 0\n  ).forEach(match => {\n    match.parentMatches.forEach(parentMatch => {\n      const index = topLevelMatches.indexOf(parentMatch.parent);\n      if (index > -1) {\n        topLevelMatches.splice(index, 1);\n      }\n    });\n  });\n\n  topLevelMatches.forEach(matchUUID => {\n    const match = matches.find(eachMatch => eachMatch.matchID === matchUUID);\n    brackets.push(addMatch(match, matchesRef, false, false, true));\n  });\n\n  return brackets;\n};\n\nexport default parseStats;\n\nconst addMatch = (match, matchesRef, winner, loser, topLevel, currentMatch) => {\n  const matchBracket = {\n    name: \"\",\n    playerIndex: -1,\n    match,\n    tie: match.winner === -1 && match.state === \"finished\",\n    winner,\n    loser,\n    topLevel,\n    currentMatch,\n    children: []\n  };\n\n  if (match.winner === -1) {\n    if (match.state === \"finished\") {\n      matchBracket.name = \"Tie\";\n    }\n  } else {\n    matchBracket.name = match.players[match.winner];\n  }\n\n  if (currentMatch) {\n    matchBracket.playerIndex = currentMatch.players.findIndex(player => player === matchBracket.name);\n  }\n\n  // add the parents\n  const parentLessPlayers = {\n    0: true,\n    1: true,\n  };\n  const addedParentMatches = [];\n  if (match.parentMatches) {\n    match.parentMatches.forEach(parentMatchInfo => {\n      const parentMatch = matchesRef[parentMatchInfo.parent];\n      if (!parentMatch) {\n        console.warn(\"Can't fine parent match\", parentMatchInfo);\n      }\n      parentLessPlayers[parentMatchInfo.playerIndex] = false;\n      if (addedParentMatches.indexOf(parentMatchInfo.parent) > -1) {\n        // this parent was already added, this must be a tie\n        return;\n      }\n      addedParentMatches.push(parentMatchInfo.parent);\n      matchBracket.children.push(\n        addMatch(\n          parentMatch,\n          matchesRef,\n          parseInt(match.winner, 10) === parseInt(parentMatchInfo.playerIndex, 10),\n          parseInt(match.winner, 10) === 1 - parseInt(parentMatchInfo.playerIndex, 10),\n          false,\n          match\n        )\n      );\n    });\n  }\n\n  // Add parents that are not a match (first rounds)\n  Object.keys(parentLessPlayers).forEach(playerIndex => {\n    if (!parentLessPlayers[playerIndex]) {\n      return;\n    }\n    const player = match.players[playerIndex];\n    matchBracket.children.push({\n      name: player,\n      playerIndex: playerIndex,\n      match: null,\n      winner: parseInt(match.winner, 10) === parseInt(playerIndex, 10),\n      loser: parseInt(match.winner, 10) === 1 - parseInt(playerIndex, 10),\n      children: [],\n      currentMatch: match,\n    });\n  });\n\n  return matchBracket;\n};\n","import React from \"react\";\nimport { Message } from \"semantic-ui-react\";\n\nimport Bracket from \"./Bracket\";\nimport \"./index.scss\";\nimport parseStats from './parseStats';\n\nexport default class Brackets extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: this.updateStats(props),\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.stats !== this.props.stats) {\n      this.setState({\n        data: this.updateStats(nextProps),\n      });\n    }\n  }\n\n  updateStats = (props) => {\n    return parseStats(props.stats);\n  };\n\n  render () {\n    if (!this.props.stats) {\n      return (\n        <Message>Waiting for Tournament Stats...</Message>\n      );\n    }\n    return (\n      <div>\n        {this.state.data.map((bracket, $index) => (\n          <div className=\"tournament-bracket\" key={ bracket.match.matchID }>\n              <Bracket\n                finished={ this.props.stats.finished }\n                item={bracket}\n                key={$index}\n                totalGames={ this.props.stats.options.numberOfGames }\n              />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport Brackets from './Brackets';\n\nexport default (props) => {\n    return (\n        <div>\n            <Brackets\n                stats={ props.tournament }\n            />\n        </div>\n    );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport '../style.scss';\n\nclass Board extends React.Component {\n  render() {\n    let finishedClass = '';\n    if (this.props.game.isFinished()) {\n      switch (this.props.game.winner) {\n        case -1:\n          finishedClass = 'tied';\n          break;\n        case 0:\n          finishedClass = 'won';\n          break;\n        case 1:\n          finishedClass = 'lost';\n          break;\n        default:\n      }\n    }\n    return (\n      <div className={ classNames('ttt-board', finishedClass, { active: this.props.highlightBoard }) }>\n        { this.props.game.board.map((row, rowIndex) => (\n          <div className={ classNames('ttt-row') } key={ `row-${rowIndex}` }>\n            { row.map((cell, cellIndex) => {\n              let highlight = false;\n              if (this.props.highlightMove) {\n                highlight = this.props.highlightMove.join(',') === [rowIndex, cellIndex].join(',');\n              }\n              if (cell.mainIndex && this.props.lastMove <= cell.mainIndex) {\n                return (\n                  <div className={ classNames('ttt-cell') } key={ `row-${cellIndex}` }>\n                    <div className='ttt-cell-played'></div>\n                  </div>\n                );\n              }\n              return (\n                <div className={ classNames('ttt-cell', { active: highlight }) } key={ `row-${cellIndex}` }>\n                  <div className={ classNames('ttt-cell-played', { 'you': cell.player === 0, 'opponent': cell.player === 1 }) }>\n                    { cell.mainIndex >= 0 ? cell.mainIndex + 1 : '' }\n                  </div>\n                </div>\n              );\n            }) }\n          </div>\n        )) }\n      </div>\n    );\n  }\n}\n\nBoard.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  game: PropTypes.object.isRequired,\n  lastMove: PropTypes.number,\n  highlightBoard: PropTypes.bool,\n  highlightMove: PropTypes.array,\n};\n\nexport default Board;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Button } from 'semantic-ui-react';\nimport UTTT from '@socialgorithm/ultimate-ttt';\nimport Slider from 'rc-slider';\n\nimport Board from './Board';\nimport './style.scss';\nimport 'rc-slider/assets/index.css';\n\nclass UTTTGame extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.replayInterval = null;\n\n    this.state = {\n      lastMove: (props.game) ? props.game.moves : 0,\n      isReplaying: false,\n    };\n  }\n\n  updateSelection = (val) => {\n    this.setState({\n      lastMove: val\n    });\n  };\n\n  replay = () => {\n    if (!this.props.game) {\n      return;\n    }\n    if (this.state.isReplaying) {\n      this.pauseReplaying();\n      return;\n    }\n    if (this.state.lastMove >= this.props.game.moves) {\n      this.setState({\n        lastMove: 0,\n      });\n    }\n    this.pauseReplaying();\n    this.setState({\n      isReplaying: true,\n    });\n    this.replayInterval = setInterval(() => {\n      this.updateSelection(this.state.lastMove + 1);\n      if (this.state.lastMove >= this.props.game.moves) {\n        this.pauseReplaying();\n      }\n    }, 300);\n  };\n\n  pauseReplaying = () => {\n    clearInterval(this.replayInterval);\n    this.setState({\n      isReplaying: false,\n    });\n  };\n\n  renderSlider(game) {\n    if (this.props.hideSlider) {\n      return null;\n    }\n    return (\n      <Grid>\n        <Grid.Column width={ 4 }>\n          <Button\n            size='tiny'\n            icon={ (this.state.isReplaying) ? 'pause' : 'play' }\n            onClick={ this.replay }\n          />\n        </Grid.Column>\n        <Grid.Column width={ 12 }>\n          <Slider\n            min={ 0 }\n            max={ game.moves }\n            step={ 1 }\n            value={ this.state.lastMove }\n            onChange={ this.updateSelection }\n          />\n        </Grid.Column>\n      </Grid>\n    );\n  }\n\n  render() {\n    const game = this.props.game || new UTTT();\n\n    return (\n      <div>\n        <div className=\"ttt\" style={ this.props.style }>\n          { game.board.map((row, rowIndex) => (\n            <div className=\"ttt-board-row\" key={ `row-${rowIndex}` }>\n              { row.map((board, boardIndex) => {\n                let highlightBoard = false;\n                let highlightMove = null;\n                if (this.props.highlightBoard) {\n                  highlightBoard = this.props.highlightBoard.join(',') === [rowIndex, boardIndex].join(',');\n                  if (highlightBoard) {\n                    highlightMove = this.props.highlightMove;\n                  }\n                }\n                return (\n                  <Board\n                    game={ board }\n                    key={ `row-${boardIndex}` }\n                    lastMove={ this.state.lastMove }\n                    highlightBoard={ highlightBoard }\n                    highlightMove={ highlightMove }\n                  />\n                );\n              }) }\n            </div>\n          )) }\n        </div>\n        { this.renderSlider(game) }\n      </div>\n    );\n  }\n}\n\nUTTTGame.propTypes = {\n  game: PropTypes.object,\n  style: PropTypes.object,\n  currentMove: PropTypes.number,\n  highlightBoard: PropTypes.array,\n  highlightMove: PropTypes.array,\n};\n\nexport default UTTTGame;\n","import React, { Fragment } from \"react\";\nimport {\n  Loader,\n  Grid,\n  List,\n  Segment,\n} from \"semantic-ui-react\";\n\nimport Match from '../Match';\nimport UTTTGame from '../../../UTTTGame';\n\nexport default class MatchPage extends React.PureComponent {\n\n  renderCurrentMatch() {\n    if (this.props.tournament.finished) {\n      return null;\n    }\n    const matches = this.props.tournament.matches;\n    const currentMatch = matches.find(match => match.state === \"playing\");\n    return (\n      <Fragment>\n        <h2>Current Match</h2>\n        {currentMatch && (\n          <Segment>\n            <Match\n              match={ currentMatch }\n              totalGames={this.props.tournament.options.numberOfGames}\n              displayProgress\n            />\n          </Segment>\n        )}\n        {!currentMatch && (\n          <Segment textAlign=\"center\">\n            <Loader active inline content=\"Waiting for Match to start...\" />\n          </Segment>\n        )}\n      </Fragment>\n    );\n  }\n\n  renderCurrentGame() {\n    if (this.props.tournament.finished) {\n      return null;\n    }\n\n    if (!this.props.currentGame) {\n      return null;\n    }\n\n    const utttGameStyle = {\n      fontSize: \"0.6em\"\n    };\n\n    return (\n      <Fragment>\n        <h2>Game</h2>\n        <div style={utttGameStyle}>\n          <UTTTGame\n            hideSlider\n            game={ this.props.currentGame }\n          />\n        </div>\n      </Fragment>\n    );\n  }\n\n  /**\n   * Renders the current match and the finished ones\n   */\n  renderMatches() {\n    const matches = this.props.tournament.matches;\n    console.log(matches);\n    return (\n      <Fragment>\n        {this.renderCurrentMatch()}\n\n        <h3>Finished</h3>\n        {matches\n          .filter(match => match.state === \"finished\")\n          .map(match => (\n            <Segment>\n              <Match\n                match={ match }\n              />\n            </Segment>\n          ))}\n      </Fragment>\n    );\n  }\n\n  renderUpcoming() {\n    const matches = this.props.tournament.matches;\n    const upcoming = matches.filter(match => match.state === \"upcoming\");\n    if (upcoming.length < 1) {\n      return null;\n    }\n    return (\n      <Fragment>\n        <h2>Next Matches</h2>\n        <List relaxed>\n          {upcoming.map(match => (\n            <List.Item>\n              <b>{match.players[0].token}</b> vs <b>{match.players[1].token}</b>\n            </List.Item>\n          ))}\n        </List>\n      </Fragment>\n    );\n  }\n\n  render() {\n    return (\n      <Grid columns={1}>\n        <Grid.Row>\n          <Grid.Column width={15}>{this.renderMatches()}</Grid.Column>\n          {/* <Grid.Column width={ 4 }>\n                          { this.renderCurrentGame() }\n                          { this.renderUpcoming() }\n                      </Grid.Column> */}\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  Icon,\n  Container,\n  Grid,\n  Label,\n  Message,\n  Button\n} from \"semantic-ui-react\";\nimport FlipMove from 'react-flip-move';\n\nimport DoubleElimination from './types/DoubleElimination';\nimport FreeForAll from './types/FreeForAll';\n\nimport './index.scss';\n\nexport default class MatchPage extends React.PureComponent {\n  \n  renderTournamentLabel() {\n    let state = \"Waiting...\";\n    let color = null;\n    if (this.props.tournament.finished) {\n      state = \"Completed\";\n      color = \"green\";\n    } else if (this.props.tournament.started) {\n      state = \"In Progress\";\n      color = \"orange\";\n    }\n    return <Label color={color} content={state} />;\n  }\n\n  renderRanking() {\n    let ranking = this.props.tournament.ranking.map((player, $index) => (\n        <div key={ player } className='player'>\n            <div className='rank'>{ $index + 1}</div>\n            <div className='name'>{ player }</div>\n        </div>\n    ));\n    // Setup the animations - separately in case we need to disable them at some point\n    ranking = (\n        <FlipMove duration={ 200 }>\n            { ranking }\n        </FlipMove>\n    );\n    return (\n      <div className='ranking'>\n        <h2 style={ { textAlign: 'center' } }>Ranking</h2>\n        { ranking }\n      </div>\n    );\n  }\n\n  renderTournament() {\n    let TournamentRenderer;\n    switch (this.props.tournament.options.type) {\n      case 'FreeForAll':\n        TournamentRenderer = FreeForAll;\n        break;\n      case 'DoubleElimination':\n        TournamentRenderer = DoubleElimination;\n        break;\n      default:\n        return (\n          <Message warning>\n            Invalid Tournament Type \"{this.props.tournament.options.type}\"\n          </Message>\n        );\n\n    }\n    return (\n      <TournamentRenderer\n        tournament={ this.props.tournament }\n      />\n    );\n  }\n\n  renderContinueButton() {\n    const disabled = !this.props.tournament.waiting;\n    return (\n      <Button\n        icon='play'\n        content={this.props.tournament.matches.length > 0 ? 'Play Next Match' : 'Start Tournament'}\n        onClick={this.props.continueMatches}\n        disabled={ disabled }\n        size='tiny'\n        primary\n      />\n    );\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <div style={ { margin: '0 1em' } }>\n            <Grid columns={ 3 }>\n                <Grid.Column largeScreen={3} widescreen={2}>\n                    <Button\n                    icon='chevron left'\n                    content='Lobby'\n                    onClick={this.props.backToLobby}\n                    basic\n                    />\n                </Grid.Column>\n                <Grid.Column>\n                <h1>\n                    <Icon name='game' /> Tournament\n                </h1>\n                </Grid.Column>\n                <Grid.Column textAlign='right'>\n                    { this.renderContinueButton() }\n                    { this.renderTournamentLabel() }\n                </Grid.Column>\n            </Grid>\n        </div>\n        <div className='tournament-page'>\n            <div className='ranking-container'>\n                {this.renderRanking()}\n            </div>\n            <div className='tournament-container'>\n                {this.renderTournament()}\n            </div>\n        </div>\n      </Container>\n    );\n  }\n}","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n\tIcon,\n\tContainer,\n\tMessage,\n\tLoader,\n\tButton,\n\tSegment,\n\tGrid,\n\tList,\n\tLabel,\n\tForm,\n\tDropdown, Popup\n} from 'semantic-ui-react';\nimport classNames from 'classnames';\n\nimport Tournament from '../Tournament'\n\nclass LobbyAdmin extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            admin: false,\n            availableGames: [],\n            lobby: {\n                token: null,\n                players: [],\n                tournament: null,\n            },\n            tournamentOptions: {\n                gameAddress: null,\n                timeout: 100,\n                numberOfGames: 50,\n                type: 'DoubleElimination',\n\t            autoPlay: false\n            },\n            update: 0, // since we are not using immutable data structures (yet), bump this when making a deep change\n            activePlayers: [],\n            activePlayersDrop: false,\n            connectedPlayersDrop: false,\n            showTournament: true,\n        };\n    }\n\n    componentDidMount() {\n        this.props.socket.socket.on('connected', data => {\n            const lobby = data.lobby;\n            if (lobby.token !== this.state.lobby.token) {\n                return;\n            }\n\t        let activePlayers = this.state.activePlayers;\n\t        if (this.state.lobby.players.length === this.state.activePlayers.length) {\n\t\t        activePlayers = lobby.players.slice();\n            }\n            console.log('connected', lobby);\n            this.setState({\n                lobby, activePlayers\n            });\n        });\n        this.props.socket.socket.on('lobby disconnected', data => {\n            const lobby = data.payload.lobby;\n            if (lobby.token !== this.state.lobby.token) {\n                return;\n            }\n            console.log('lobby disconnected', lobby);\n            this.setState({\n                lobby,\n            });\n        });\n        this.props.socket.emit('lobby join', {\n            token: this.token(),\n            spectating: true,\n        });\n        this.props.socket.socket.on('lobby joined', data => {\n            const {lobby, isAdmin} = data;\n            this.setState({\n                admin: isAdmin,\n                lobby,\n                showTournament: true,\n            });\n        });\n        \n        this.props.socket.socket.on('game list', data => {\n            this.setState({availableGames: data});\n        });\n\n\t    this.props.socket.socket.on('lobby tournament started', data => {\n            if (!data.tournament) {\n\t\t\t    return;\n\t\t    }\n\n            let newLobby = Object.assign({}, this.state.lobby);\n            newLobby.tournament = data.tournament;\n            console.log('lobby tournament started', newLobby);\n            this.setState({lobby: newLobby});\n        });\n        \n        this.props.socket.socket.on('lobby tournament continued', data => {\n            if (!data.tournament) {\n\t\t\t    return;\n\t\t    }\n\n            let newLobby = Object.assign({}, this.state.lobby);\n            newLobby.tournament = data.tournament;\n            console.log('lobby tournament continued', newLobby);\n            this.setState({lobby: newLobby});\n        });\n        \n\t    this.props.socket.socket.on('lobby player kicked', data => {\n\t\t    if (!data.lobby) {\n\t\t\t    return;\n            }\n            console.log('lobby player kicked', data.lobby);\n\t\t    this.setState({\n\t\t\t    lobby: data.lobby,\n\t\t    });\n\t    });\n\t    this.props.socket.socket.on('lobby player banned', data => {\n\t\t    if (!data.lobby) {\n\t\t\t    return;\n            }\n            console.log('lobby player banned', data.lobby);\n\t\t    this.setState({\n\t\t\t    lobby: data.lobby,\n\t\t    });\n\t    });\n        this.props.socket.socket.on('tournament stats', data => {\n            const lobby = this.state.lobby;\n            if (lobby.tournament && data) {\n                lobby.tournament = data;\n                console.log('tournament stats', lobby);\n                this.setState({\n                    lobby,\n                    update: this.state.update + 1,\n                });\n            }\n        });\n    }\n\n    startTournament = () => {\n        this.props.socket.socket.emit('lobby tournament start', {\n            token: this.state.lobby.token,\n            options: this.state.tournamentOptions,\n\t        players: this.state.activePlayers.map(p => p.token)\n        });\n\t    this.setState({showTournament: true});\n    };\n\n    token = () => this.props.match.params.name;\n\n\tupdateOption = (field) => (event, data) => {\n\t\tconst updatedOptions = this.state.tournamentOptions;\n\t\tupdatedOptions[field] = data.value;\n\t\tthis.setState({\n\t\t\ttournamentOptions: updatedOptions,\n\t\t\tupdate: this.state.update + 1,\n\t\t});\n\t};\n\n\tupdateTypeOption = (event, data) => {\n\t\tconst updatedOptions = this.state.tournamentOptions;\n\t\tupdatedOptions.type = data.value;\n\t\tupdatedOptions.autoPlay = data.value === 'FreeForAll';\n\t\tthis.setState({\n\t\t\ttournamentOptions: updatedOptions,\n\t\t\tupdate: this.state.update + 1,\n\t\t});\n\t};\n\n\tupdateCheckedOption = (field) => (event, data) => {\n\t\tconst updatedOptions = this.state.tournamentOptions;\n\t\tupdatedOptions[field] = data.checked;\n\t\tthis.setState({\n\t\t\ttournamentOptions: updatedOptions,\n\t\t\tupdate: this.state.update + 1,\n\t\t});\n\t};\n\n\tkickPlayer = (token) => {\n\t\tthis.props.socket.socket.emit('lobby player kick', {\n\t\t\tlobbyToken: this.state.lobby.token,\n\t\t\tplayerToken: token\n        });\n        this.removeActivePlayer(token);\n\t};\n\n\tbanPlayer = (token) => {\n\t\tthis.props.socket.socket.emit('lobby player ban', {\n\t\t\tlobbyToken: this.state.lobby.token,\n\t\t\tplayerToken: token\n        });\n        this.removeActivePlayer(token);\n    };\n\n    addActivePlayer = (token) => {\n        const activePlayers = [...this.state.activePlayers];\n        if (!activePlayers.find(player => player === token)) {\n            const player = this.state.lobby.players.find(player => player === token);\n            if (player) {\n                activePlayers.push(player);\n                this.setState({\n                    activePlayers,\n                });\n            }\n        }\n    }\n    \n    removeActivePlayer = (token) => {\n        const index = this.state.activePlayers.indexOf(token);\n        if (index > -1) {\n            const activePlayers = [...this.state.activePlayers];\n            activePlayers.splice(index, 1);\n            this.setState({\n                activePlayers,\n            });\n        }\n    };\n\n\tonDragPlayerStart = (token, e) => {\n\t\te.dataTransfer.setData(\"text/plain\", token);\n\t\te.dataTransfer.effectAllowed = 'move';\n\t};\n\n\tonDragPlayerDrop = (e, type) => {\n\t\te.preventDefault();\n\t\tconst token = e.dataTransfer.getData(\"text\");\n\t\tif (type === 'active') {\n\t\t\tthis.addActivePlayer(token);\n\t\t} else {\n            this.removeActivePlayer(token);\n        }\n                                                                        \t\tthis.setState({\n            activePlayersDrop: false,\n            connectedPlayersDrop: false,\n        });\n\t};\n\n\tonDragPlayerMouseMove = (e, type, playersDrop) => {\n\t\te.preventDefault();\n\t\tconst key = type + 'PlayersDrop';\n\t\tthis.setState({\n            [key]: playersDrop,\n        });\n\t};\n\n\tonDragPlayerOver = (e, type) => {\n\t\te.preventDefault();\n\t};\n\n\tbackToLobby = () => {\n\t\tthis.setState({showTournament: false});\n\t};\n\n\tcontinueMatches = () => {\n\t\tthis.props.socket.socket.emit('lobby tournament continue', {\n\t\t\ttoken: this.state.lobby.token\n\t\t});\n\t};\n\n    renderLoader = () => {\n        if (this.state.admin) {\n            return null;\n        }\n        return (\n            <div style={ { textAlign: 'center', color: '#999' } }>\n                <Loader\n                    inline\n                    active\n                    content='Waiting for game to start...'\n                />\n            </div>\n        );\n    };\n\n    renderAdmin = () => {\n        if (!this.state.admin) {\n            return null;\n        }\n        const availableGames = this.state.availableGames.map(game => {\n            return {\n                text: `${game.info.name}`,\n                value: game.address,\n                title: game.address,\n                icon: game.healthy ? 'green circle' : 'yellow warning sign',\n                disabled: !game.healthy,\n            }\n        });\n        const tournamentModes = [\n            {\n                text: 'Free For All',\n                value: 'FreeForAll',\n                title: 'Everyone plays everyone else',\n            },\n            {\n                text: 'Double Elimination',\n                value: 'DoubleElimination',\n                title: 'League Mode, a player gets kicked out when losing two games',\n            },\n        ];\n        const title = (this.state.lobby.players.length < 2) ? 'At least two players need to be connected' : 'Start the match';\n\t    return (\n            <Grid columns={ 1 }>\n                <Grid.Row>\n                    <Grid.Column>\n                        <h3>Tournament Settings:</h3>\n                        <Form size='small'>\n                            <Form.Select\n                                label='Game'\n                                options={ availableGames }\n                                value={ this.state.tournamentOptions.gameAddress }\n                                onChange={ this.updateOption('gameAddress') }\n                            />\n                            <Form.Group widths='equal'>\n                                <Form.Input\n                                    label='Timeout (Per Move, in ms)'\n                                    type='number'\n                                    placeholder='100'\n                                    value={ this.state.tournamentOptions.timeout }\n                                    onChange={ this.updateOption('timeout') }\n                                />\n                                <Form.Input\n                                    label='Number of Games per Match'\n                                    type='number'\n                                    placeholder='10'\n                                    value={ this.state.tournamentOptions.numberOfGames }\n                                    onChange={ this.updateOption('numberOfGames') }\n                                />\n                            </Form.Group>\n                            <Form.Select\n                                label='Tournament Type'\n                                options={ tournamentModes }\n                                value={ this.state.tournamentOptions.type }\n                                onChange={ this.updateTypeOption }\n                            />\n\t                        <Form.Checkbox\n\t\t                        label='Automatically play next set of games'\n\t\t                        checked={ this.state.tournamentOptions.autoPlay }\n\t\t                        onChange={ this.updateCheckedOption('autoPlay') }\n\t                        />\n                            <Button\n                                primary\n                                icon='play'\n                                title={ title }\n                                disabled={ this.state.activePlayers.length < 2 || this.invalidGameServerSelected() }\n                                content='Start Game'\n                                onClick={ this.startTournament }\n                            />\n                        </Form>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        );\n    };\n\n    renderJoinCommand = () => {\n        const connectStyle = {\n            margin: '1em -1em 0',\n            borderTop: '1px solid #efefef',\n            padding: '1em 1em 0',\n            fontSize: '0.9em',\n        };\n        const host = this.props.socket.socket.io.uri;\n        return (\n            <div style={ connectStyle }>\n                <p>Connect your player:</p>\n                <pre className='code'>$ uabc --host \"{host}\" --lobby \"{this.token()}\" --token \"your team name\" -f \"path/to/executable\"</pre>\n            </div>\n        );\n    };\n\n    addAllConnectedPlayers = () => {\n        this.setState({\n            activePlayers: this.state.lobby.players,\n        });\n    };\n\n    invalidGameServerSelected = () => {\n        return this.state.tournamentOptions.gameAddress === undefined ||\n            this.state.tournamentOptions.gameAddress === null ||\n            this.state.tournamentOptions.gameAddress.length === 0;\n    };\n\n\trenderPlayers = ({titleText, type, dropText, infoText, displayAddAll}) => {\n\t\tconst footerStyle = {\n\t\t\tposition: 'absolute',\n\t\t\tbottom: 0,\n\t\t\tleft: 0,\n\t\t\tpadding: '0.3em',\n\t\t\twidth: '100%',\n\t\t\ttextAlign: 'center',\n\t\t\tbackground: '#efefef',\n\t\t\tfontSize: '0.7em',\n\t\t};\n        const players = type === 'connected' ? this.state.lobby.players : this.state.activePlayers;\n        players.sort();\n        const playerDropKey = type + 'PlayersDrop';\n        \n        let addAll = (\n            <div style={ footerStyle }>\n                <a href={ window.location }><Icon name='copy outline' /> { this.token() }</a>\n            </div>\n        );\n        if (displayAddAll) {\n            addAll = (\n                <div style={ footerStyle }>\n\t\t\t\t\t<button className=\"link\" onClick={ this.addAllConnectedPlayers }>\n                        <Icon name='plus' /> Add All\n                    </button>\n\t\t\t\t</div>\n            );\n        }\n\n\t\treturn (\n\t\t\t<div style={ { paddingBottom: '2em', height: 'calc(100% - 2em)' } }>\n\t\t\t\t<Popup trigger={<p>{titleText} <Label size='mini' style={ { float: 'right' } }>{ players.length }</Label></p>} content={infoText} />\n\n\t\t\t\t<div onDrop={(e) => this.onDragPlayerDrop(e, type)} onDragOver={this.onDragPlayerOver} onDragEnter={(e) => this.onDragPlayerMouseMove(e, type, true)} onDragLeave={(e) => this.onDragPlayerMouseMove(e, type, false)}\n\t\t\t\t     style={{height: '100%', position: 'relative', background: this.state[playerDropKey] && '#efefef', borderRadius: this.state[playerDropKey] && '0.28571429rem'}}>\n\t\t\t\t\t{\n\t\t\t\t\t\t!this.state[playerDropKey] &&\n\t\t\t\t\t\t<List className='draggable relaxed divided'>\n\t\t\t\t\t\t\t{ players.map(player => {\n                                const isActive = this.state.activePlayers.indexOf(player) > -1;\n                                return (\n                                    <List.Item key={ player } draggable className={ classNames({ inactive: !isActive }) } onDragStart={(e) => this.onDragPlayerStart(player, e)}>\n                                        <Icon name='circle' className={ classNames({ outline: !isActive }) } color='green' style={{display: 'inline-block', marginRight: '1rem'}}/>\n                                        { player }\n                                        <Dropdown style={{float: 'right'}}>\n                                            <Dropdown.Menu>\n                                                <Dropdown.Item text=\"Kick player\" onClick={() => this.kickPlayer(player)}/>\n                                                <Dropdown.Item text=\"Ban player\" onClick={() => this.banPlayer(player)}/>\n                                                { !isActive && (<Dropdown.Item text=\"Add player\" onClick={() => this.addActivePlayer(player)}/>) }\n                                                { isActive && (<Dropdown.Item text=\"Remove player\" onClick={() => this.removeActivePlayer(player)}/>) }\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n                                    </List.Item>\n                                );\n                            }) }\n\t\t\t\t\t\t</List>\n\t\t\t\t\t}\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state[playerDropKey] &&\n\t\t\t\t\t\t<p style={{position: 'absolute', top: '50%', transform: 'translateY(-50%)', width: '100%', textAlign: 'center'}}>{dropText}</p>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t{ addAll }\n\t\t\t</div>\n\t\t);\n\t};\n\n    render() {\n        if (!this.props.socket) {\n            return (\n                <Message>\n                    Please connect to the server first.\n                </Message>\n            );\n        }\n\n        if (this.state.lobby.tournament && this.state.showTournament) {\n            return (\n                <Tournament\n                  tournamentOptions={ this.state.tournamentOptions }\n                  tournament={ this.state.lobby.tournament }\n                  backToLobby={this.backToLobby}\n                  continueMatches={this.continueMatches}\n                />\n            );\n        }\n    \n        return (\n            <Container textAlign='center' fluid style={{width: '80%'}}>\n                <Segment attached='top' className='socialgorithm-hue-bg animated-hue'>\n                    <h1><Icon name='game' /> Welcome to { this.state.lobby.token }!</h1>\n                </Segment>\n                <Segment attached='bottom' textAlign='left'>\n                    <Grid columns={ 3 } divided>\n\t                    <Grid.Column width={ 3 }>\n\t\t                    { this.renderPlayers({titleText: 'Connected Players', type: 'connected', dropText: 'Exclude player from game', infoText: 'Players connected to the lobby', displayAddAll: true}) }\n\t                    </Grid.Column>\n\t                    <Grid.Column width={ 3 }>\n\t\t                    { this.renderPlayers({titleText: 'Players', type: 'active', dropText: 'Include player in game', infoText: 'Players to be included in the tournament'}) }\n\t                    </Grid.Column>\n                        <Grid.Column width={ 10 }>\n                            { this.renderLoader() }\n                            { this.renderAdmin() }\n                            { this.renderJoinCommand() }\n                        </Grid.Column>\n                    </Grid>\n                </Segment>                \n            </Container>\n        );\n    }\n};\n\nexport default withRouter(LobbyAdmin);","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { Icon, Container } from 'semantic-ui-react';\n\nimport ServerContainer from '../../containers/ServerContainer';\nimport LobbySelector from '../../components/Lobby';\nimport LobbyAdmin from '../../components/Lobby/Admin';\n\nexport default (props) => {\n    if (!props.socket || !props.socket.socket || !props.socket.socket.connected) {\n        return (\n            <Container textAlign='center'>\n                <h1><Icon name='game' /><br /> Match</h1>\n                <ServerContainer content=\"Connect to server\" />\n            </Container>\n        );\n    }\n\n    const render = (Component) => {\n        return () => (\n            <Component { ...props } />\n        );\n    };\n\n    return (\n        <Switch>\n            <Route\n                path='/tournaments/:name'\n                render={ render(LobbyAdmin) }\n            />\n            <Route\n                render={ render(LobbySelector) }\n            />\n        </Switch>\n    );\n};","import React from 'react';\n\nimport SocketContext from '../../components/SocketProvider/provider';\nimport Tournament from './section';\n\nexport default () => {\n    return (\n        <SocketContext.Consumer>\n            {socket => (\n                <Tournament socket={ socket } />\n            )}\n        </SocketContext.Consumer>\n    );\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Header, Icon, Segment, Message } from 'semantic-ui-react';\nimport Dropzone from 'react-dropzone';\n\nimport './index.scss';\n\nclass Uploader extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      file: null,\n      loading: false,\n      errors: null,\n    };\n  }\n\n  onDrop = (acceptedFiles, rejectedFiles) => {\n    if (!acceptedFiles || acceptedFiles.length < 1) {\n      return this.setState({\n        errors: null,\n      });\n    }\n    if (acceptedFiles.length > 1) {\n      return this.setState({\n        errors: 'Upload only one file please',\n      });\n    }\n\n    const file = acceptedFiles[0];\n    const ext = file.name.split('.').pop();\n    if (ext !== 'log') {\n      return this.setState({\n        errors: 'Please make sure you are uploading a .log file (Uploaded file: ' + file.name + ')',\n      });\n    }\n\n    this.readFile(file);\n  };\n\n  readFile = (file) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.setState({\n        loading: false,\n      });\n      this.props.onUpload(reader.result);\n    };\n    reader.onloadstart = () => {\n      this.setState({\n        loading: true,\n      });\n    };\n    reader.onerror = (error) => {\n      this.setState({\n        errors: 'Error uploading file: ' + file.name + ' - ' + error,\n      });\n    };\n    reader.readAsText(file);\n  };\n\n  render() {\n    let errorMessage = null;\n    if (this.state.errors) {\n      errorMessage = (\n        <Message negative attached='bottom'>\n          <Icon name='warning sign' />\n          { this.state.errors }\n        </Message>\n      );\n    }\n    return (\n      <div>\n        <Header>Replay past games</Header>\n        <p>Here you'll be able to upload game logs to analyse your algorithm's performance.</p>\n        <Dropzone\n          className='dropzone'\n          multiple={ false }\n          onDrop={this.onDrop}\n        >\n          <Segment loading={ this.state.loading } className='upload-box' attached={ !!errorMessage }>\n            <p><Icon name='cloud upload' size='big' /></p>\n            <p>Click here, or drop a log file to upload a game log.</p>\n          </Segment>\n          { errorMessage }\n        </Dropzone>\n      </div>\n    );\n  }\n}\n\nUploader.propTypes = {\n  onUpload: PropTypes.func.isRequired,\n};\n\nexport default Uploader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Header, Grid, List, Label, Table, Divider, Message } from 'semantic-ui-react';\nimport UTTT from '@socialgorithm/ultimate-ttt';\nimport { ME, OPPONENT } from '@socialgorithm/ultimate-ttt/dist/model/constants';\n\nimport UTTTGame from '../../../components/UTTTGame';\n\nconst PLAYER_YOU = ME;\nconst PLAYER_OPPONENT = OPPONENT;\n\nclass GameExplorer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const {error, games, won, lost, tied} = this.parseGameData(props.gameData);\n\n    console.log('parsed', games);\n\n    this.state = {\n      error,\n      games,\n      activeGame: 0,\n      activeMove: -1,\n      won,\n      lost,\n      tied,\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.gameData !== nextProps.gameData) {\n      const {games, won, lost, tied} = this.parseGameData(nextProps.gameData);\n\n      this.setState({\n        games,\n        activeGame: 0,\n        activeMove: -1,\n        won,\n        lost,\n        tied,\n      });\n    }\n  }\n\n  parseGameData = (gameData) => {\n    const ret = {\n      error: null,\n      games: [],\n      won: 0,\n      lost: 0,\n      tied: 0,\n    };\n    const newline = /\\r\\n|\\r|\\n/g;\n    const lines = gameData.split(newline)\n      .filter((line) => line.length > 0)\n      .map((line) => line.split('] ').pop()\n      );\n    let curGame;\n    try {\n      lines.forEach((line) => {\n        if (line === 'init') {\n          if (ret.games[curGame]) {\n            console.log('Was it finished? ', ret.games[curGame].uttt.isFinished());\n          }\n          curGame = ret.games.push({\n            uttt: new UTTT(3),\n            moves: [],\n          }) - 1;\n          return;\n        }\n        if (line.indexOf(';') < 0) {\n          return;\n        }\n        const game = ret.games[curGame];\n        const parts = line.split(' ');\n        let turn = parts[0].split(';');\n          let opponent = false;\n          if (parts.length > 1) {\n            opponent = true;\n            turn = parts[1].split(';');\n          }\n          const board = turn[0].split(',').map((coord) => parseInt(coord, 10));\n          const move = turn[1].split(',').map((coord) => parseInt(coord, 10));\n\n          game.moves.push({\n            board,\n            move,\n            player: (opponent) ? PLAYER_OPPONENT : PLAYER_YOU,\n          });\n\n          if (opponent) {\n            game.uttt = game.uttt.addOpponentMove(board, move);\n          } else {\n            game.uttt = game.uttt.addMyMove(board, move);\n          }\n\n          // update state\n          if (game.uttt.isFinished()) {\n            switch (game.uttt.getResult()) {\n              case PLAYER_YOU:\n                ret.won = ret.won + 1;\n                break;\n              case PLAYER_OPPONENT:\n                ret.lost = ret.lost + 1;\n                break;\n              default:\n              case -1:\n                ret.tied = ret.tied + 1;\n                break;\n            }\n          }\n      });\n    } catch(e) {\n      console.error('Error parsing game', e);\n      ret.error = 'Unable to parse game - please make sure the log file is correct.';\n      return ret;\n    }\n    return ret;\n  };\n\n  printWinner = (winner) => {\n    let color = 'grey';\n    let text = 'Tied';\n    if (winner === PLAYER_YOU) {\n      color = 'green';\n      text = 'won';\n    } else if (winner === PLAYER_OPPONENT) {\n      color = 'red';\n      text = 'lost'\n    }\n    return (\n      <Label color={ color }>\n        { text }\n      </Label>\n    );\n  };\n\n  select = (move) => {\n    if (this.state.activeMove === move) {\n      this.setState({\n        activeMove: -1,\n      });\n    } else {\n      this.setState({\n        activeMove: move,\n      });\n    }\n  };\n\n  render() {\n    let activeMove = {\n      board: null,\n      move: null,\n    };\n    if (this.state.activeMove > -1) {\n      activeMove = this.state.games[this.state.activeGame].moves[this.state.activeMove];\n    }\n\n    if (this.state.error) {\n      return (\n        <Message error>\n          { this.state.error }\n        </Message>\n      );\n    }\n\n    return (\n      <Grid>\n        <Grid.Column width={ 4 }>\n          <h2>\n            <div style={ { float: 'right' } }>\n              <Label color='green'>\n                <b>Won:</b> { this.state.won }\n              </Label>\n              <Label color='red'>\n                <b>Lost:</b> { this.state.lost }\n              </Label>\n              <Label color='grey'>\n                <b>Tied:</b> { this.state.tied }\n              </Label>\n            </div>\n            Games\n          </h2>\n          <List selection divided relaxed>\n            { this.state.games.map((game, $index) => (\n              <List.Item key={ $index } active={ $index === this.state.activeGame } onClick={ () => { this.setState({ activeGame: $index, activeMove: -1, }); } }>\n                <List.Content>\n                  { this.printWinner(game.uttt.winner) } { game.uttt.moves } moves\n                </List.Content>\n              </List.Item>\n            )) }\n          </List>\n        </Grid.Column>\n        <Grid.Column width={ 12 }>\n          <Grid columns={ 2 } stackable>\n            <Grid.Column>\n              <Header>Game</Header>\n              <UTTTGame\n                style={ { fontSize: '0.7em', margin: '0 auto' } }\n                game={ this.state.games[this.state.activeGame].uttt }\n                highlightBoard={ activeMove.board }\n                highlightMove={ activeMove.move }\n              />\n              <Divider />\n              <p><Label empty circular color='blue' horizontal /> Player A (You)</p>\n              <p><Label empty circular color='red' horizontal /> Player B (Opponent)</p>\n            </Grid.Column>\n            <Grid.Column>\n              <Header>Moves</Header>\n              <Table selectable inverted striped>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>#</Table.HeaderCell>\n                    <Table.HeaderCell>Board</Table.HeaderCell>\n                    <Table.HeaderCell>Move</Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  { this.state.games[this.state.activeGame].moves.map((data, $index) => (\n                    <Table.Row\n                      className={ classNames({ active: this.state.activeMove === $index}) }\n                      key={ $index }\n                      onClick={ () => { this.select($index) } }\n                    >\n                      <Table.Cell>\n                        <Label circular color={ (data.player === 0)? 'blue' : 'red' }>{ $index + 1 }</Label>\n                      </Table.Cell>\n                      <Table.Cell>{ data.board.join(', ') }</Table.Cell>\n                      <Table.Cell>{ data.move.join(', ') }</Table.Cell>\n                    </Table.Row>\n                  )) }\n                </Table.Body>\n              </Table>\n            </Grid.Column>\n          </Grid>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nGameExplorer.propTypes = {\n  gameData: PropTypes.string.isRequired,\n};\n\nexport default GameExplorer;\n","import React from 'react';\nimport { Container } from 'semantic-ui-react';\n\nimport Uploader from './Uploader';\nimport GameExplorer from './GameExplorer';\n\nclass Replay extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      log: null,\n    };\n  }\n\n  onUpload = (file) => {\n    this.setState({\n      log: file,\n    });\n  };\n\n  render() {\n    let content;\n    if (this.state.log) {\n      content = (\n        <GameExplorer gameData={ this.state.log  } />\n      );\n    } else {\n      content = (\n        <Uploader onUpload={ this.onUpload } />\n      );\n    }\n\n    return (\n      <Container fluid style={ { padding: '0 20px' } }>\n        { content }\n      </Container>\n    );\n  }\n}\nexport default Replay;\n","import React from 'react';\nimport { Icon, Container, Message } from 'semantic-ui-react';\n\nclass NotFound extends React.Component {\n  render() {\n    return (\n      <Container textAlign='center'>\n            <h1><Icon name='broken chain' /><br /> Not Found!</h1>\n            <Message warning compact>\n                Sorry! The content you're looking for may have moved. Please try navigating again to it.\n            </Message>\n        </Container>\n    );\n  }\n}\nexport default NotFound;\n","import React from 'react';\nimport { Switch, Route, withRouter, Redirect } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport queryString from 'qs';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Header from '../../components/Header';\nimport Footer from '../../components/Footer';\nimport SocketContainer from '../../containers/SocketContainer';\nimport Home from '../Home';\nimport Tournaments from '../Tournaments';\nimport Replay from '../Replay';\nimport NotFound from '../NotFoundPage';\n\nimport './index.scss';\nclass App extends React.PureComponent {\n  render() {\n    const params = queryString.parse(this.props.location.search.substr(1));\n    if (params.p) {\n      return (\n        <Redirect to={ params.p } />\n      );\n    }\n    return (\n      <SocketContainer>\n        <Header />\n        <ToastContainer />\n        <div className='main-content'>\n          <Switch>\n            <Route exact path='/' component={ Home } />\n            <Route path='/tournaments' component={ Tournaments } />\n            <Route path='/replay' component={ Replay } />\n            <Route path='' component={ NotFound } />\n          </Switch>\n        </div>\n        <Footer />\n      </SocketContainer>\n    );\n  }\n}\n\nexport default withRouter(App);\n","import { handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport uuid from 'uuid';\n\nimport * as constants from './constants';\n\nconst hosts = {\n  local: 'http://localhost:3141',\n  online: 'https://ultimate-ttt-server.herokuapp.com',\n};\n\nexport const initialState = Map({\n  host: (window.location.host.indexOf('localhost') < 0) ? hosts.online : hosts.local,\n  status: 'disconnected',\n  error: null,\n  uuid: getUuid(),\n});\n\nexport default handleActions({\n  [constants.CONNECT]: connect,\n  [constants.DISCONNECT]: disconnect,\n  [constants.CONNECTED]: connected,\n  [constants.DISCONNECTED]: disconnected,\n  [constants.CONNECTION_ERROR]: connectionError,\n}, initialState);\n\nfunction connect(state, action) {\n  return state.merge({\n    host: action.payload,\n    status: 'connecting',\n    error: null,\n  });\n}\n\nfunction disconnect(state, action) {\n  return state.merge({\n    status: 'disconnecting',\n    error: null,\n  });\n}\n\nfunction connected(state, action) {\n  return state.merge({\n    status: 'connected',\n    error: null,\n  });\n}\n\nfunction disconnected(state, action) {\n  return initialState;\n}\n\nfunction connectionError(state, action) {\n  return state.merge({\n    status: 'disconnected',\n    error: action.payload,\n  });\n}\n\n/**\n * Load the web id from localStorage if available\n */\nfunction getUuid() {\n  const newUuid = `web-${uuid.v4()}`;\n  const STORAGE_KEY = 'uuid';\n  if (!storageAvailable('localStorage')) {\n    return newUuid;\n  }\n  const storedUuid = localStorage.getItem(STORAGE_KEY);\n  if (storedUuid) {\n    return storedUuid;\n  }\n  localStorage.setItem(STORAGE_KEY, newUuid);\n  return newUuid;\n};\n\nfunction storageAvailable(type) {\n  try {\n      var storage = window[type],\n          x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n  }\n  catch(e) {\n      return e instanceof DOMException && (\n          // everything except Firefox\n          e.code === 22 ||\n          // Firefox\n          e.code === 1014 ||\n          // test name field too, because code might not be present\n          // everything except Firefox\n          e.name === 'QuotaExceededError' ||\n          // Firefox\n          e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n          // acknowledge QuotaExceededError only if there's something already stored\n          storage.length !== 0;\n  }\n}","import { handleActions } from 'redux-actions';\nimport { Map, List } from 'immutable';\n\nimport * as constants from './constants';\n\nexport const initialState = Map({\n  players: List(),\n  games: []\n});\n\nexport default handleActions({\n  [constants.GET_STATS]: getStats,\n  //[constants.UPDATE_STATS]: updateStats,\n}, initialState);\n\nfunction getStats(state, action) {\n  return state;\n}\n\n// function updateStats(state, action) {\n//   const update = action.payload;\n//   const players = state.get('players') || List();\n//   switch (update.type) {\n//     case 'stats':\n//       return state.merge({\n//         players: update.payload.players.map((player) => (\n//           {\n//             name: player,\n//             online: true,\n//           }\n//         )),\n//         games: update.payload.games,\n//       });\n//     case 'connect':\n//       for (let i = 0; i < players.size; i++) {\n//         if (players.get(i).name === update.payload) {\n//           return state.merge({\n//             players: players.mergeIn(i, {\n//               online: true\n//             }),\n//           });\n//         }\n//       }\n//       return state.merge({\n//         players: players.push({\n//           name: update.payload,\n//           online: true,\n//         }),\n//       });\n//     case 'disconnect':\n//       if (!update.payload) {\n//         return state;\n//       }\n//       for (let i = 0; i < players.size; i++) {\n//         if (players.get(i).name === update.payload) {\n//           return state.merge({\n//             players: players.mergeIn(i, {\n//               online: false\n//             }),\n//           });\n//         }\n//       }\n//       return state;\n//     default:\n//       return state;\n//   }\n// }","import { handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\n\nimport * as constants from './constants';\n\nconst tournament = {\n  players: {},\n  started: false,\n};\n\nexport const initialState = Map(tournament);\n\nexport default handleActions({\n  [constants.GET_TOURNAMENTS]: getTournaments,\n  [constants.UPDATE_TOURNAMENTS]: updateTournaments,\n}, initialState);\n\nfunction getTournaments(state, action) {\n  return state;\n}\n\nfunction updateTournaments(state, action) {\n  const update = action.payload;\n  switch (update.type) {\n    case 'stats':\n      return Map(update.payload);\n    default:\n      return state;\n  }\n}","/**\n * Combine all reducers in this file and export the combined reducers.\n * If we were to do this in store.js, reducers wouldn't be hot reloadable.\n */\n\nimport { combineReducers } from 'redux-immutable';\nimport { fromJS } from 'immutable';\nimport { LOCATION_CHANGE } from 'react-router-redux';\n\nimport serverReducer from './containers/ServerContainer/reducer';\nimport statsReducer from './containers/StatsContainer/reducer';\nimport tournamentsReducer from './containers/TournamentContainer/reducer';\n\n\n// Initial routing state\nconst routeInitialState = fromJS({\n  locationBeforeTransitions: null,\n});\n\n/**\n * Merge route into the global application state\n */\nfunction routeReducer(state = routeInitialState, action) {\n  switch (action.type) {\n    /* istanbul ignore next */\n    case LOCATION_CHANGE:\n      return state.merge({\n        locationBeforeTransitions: action.payload,\n      });\n    default:\n      return state;\n  }\n}\n\n/**\n * Creates the main reducer with the asynchronously loaded ones\n */\nexport default function createReducer(asyncReducers) {\n  return combineReducers({\n    route: routeReducer,\n    server: serverReducer,\n    stats: statsReducer,\n    tournaments: tournamentsReducer,\n    ...asyncReducers,\n  });\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter as Router } from 'react-router-redux';\nimport createHistory from 'history/createBrowserHistory';\n\nimport 'semantic-ui-css/semantic.css';\n\nimport App from './sections/App';\nimport configureStore from './store';\nimport './index.scss';\n\nconst initialState = {};\nconst history = createHistory();\nconst store = configureStore(initialState, history);\nconst MOUNT_NODE = document.getElementById('root');\n\nconst app = (\n  <Provider store={ store }>\n    <Router history={ history }>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(\n  app,\n  MOUNT_NODE\n);\n","/**\n * Create the store with asynchronously loaded reducers\n */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { fromJS } from 'immutable';\nimport { routerMiddleware } from 'react-router-redux';\nimport handleTransitions from 'redux-history-transitions';\n\nimport createReducer from './reducers';\n\nexport default function configureStore(initialState = {}, history) {\n  // Create the store with extra middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n  // 3. loadingBarMiddleware: Automatically displays a loading bar\n  const middlewares = [\n    routerMiddleware(history),\n  ];\n\n  const enhancers = [\n    applyMiddleware(...middlewares),\n    handleTransitions(history),\n  ];\n\n  // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  /* eslint-disable no-underscore-dangle */\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose;\n  /* eslint-enable */\n\n  const store = createStore(\n    createReducer(),\n    fromJS(initialState),\n    composeEnhancers(...enhancers)\n  );\n\n  // Extensions\n  store.asyncReducers = {}; // Async reducer registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      import('./reducers').then((reducerModule) => {\n        const createReducers = reducerModule.default;\n        const nextReducers = createReducers(store.asyncReducers);\n\n        store.replaceReducer(nextReducers);\n      });\n    });\n  }\n\n  return store;\n}\n"],"sourceRoot":""}